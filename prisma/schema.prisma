generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

enum Role {
  USER
  ASSISTANT
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  chats    Chat[]
  sessions Session[]
  threads  Thread[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Thread {
  id        String   @id @default(cuid())
  createdAt DateTime @updatedAt
  title     String
  userId    String

  chats Chat[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chat {
  id        String   @id @default(cuid())
  createdAt DateTime @updatedAt
  prompt    String
  result    String   @default("")
  userId    String
  threadId  String

  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Memory {
  id        String                     @id @default(dbgenerated("gen_random_uuid()"))
  threadId  String
  role      Role
  content   String
  embedding Unsupported("vector(384)")
}
